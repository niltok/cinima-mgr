@page "/AlreadyPay/{OrderId}/{TaskId}"
@inject NavigationManager NavigationManager

@code {
    [Parameter]
    public string OrderId { get; set; }
    [Parameter]
    public string TaskId { get; set; }

    protected override void OnParametersSet()
    {
        takeEffect();
        NavigationManager.NavigateTo($"/MyOrders/{OrderId}");
    }

    async Task takeEffect()
    {
        await Global.App.Services.GetService<EventMgr>()!.Cancel(TaskId);
        await using var db = new MgrContext();
        
        bool _savefailed = false;
        do
        {
            var _order = await db.Orders.Where(t => t.Id == OrderId).Include(t => t.Tickets).ToListAsync();
            User _user = await db.Users.SingleAsync(t => t.Name == _order.First().UserName);
            _order.First().State = 1;
            _order.First().PayTime = DateTime.Now;
            if ( _order.First().Type == 0 )
            {
                await Task.WhenAll(_order.Select(t => db
                    .Entry(t.Tickets.First())
                    .Reference(s => s.Show)
                    .LoadAsync()));
                await Task.WhenAll(_order.Select(t => db
                    .Entry(t.Tickets.First().Show)
                    .Reference(s => s.Movie)
                    .LoadAsync()));
                _order.First().Tickets.First().Show.Movie.BoxOffice += (long)(_order.First().Price * 100);
                foreach (var i in _order.First().Tickets)
                {
                    i.Status = 1;
                }
            }
            else
            {
                if (_user.VIPExpireTime > DateTime.Now)
                    _user.VIPExpireTime += TimeSpan.FromDays((double)_order.First().Days);
                else _user.VIPExpireTime = DateTime.Now + TimeSpan.FromDays((double)_order.First().Days);
            }
            try
            {
                await db.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException e)
            {
                _savefailed = true;
            }
        } while (_savefailed);
    }
}