@page "/"
@inject NavigationManager NavigationManager
@inject EventMgr EventMgr

<PageTitle>主页</PageTitle>


<h1 style="margin: 3rem;">欢迎来到喵票票</h1>

<div class="container-index">
    @foreach (var m in _movies)
    {
        <div class="item">
            <p>
                <NavLink href=@($"/Movie/Info/{m.Id}")>
                    <img class="movie_cover"
                         src=@($"/Movie/Cover/{m.Id}")
                         alt=@($"Cover of {m.Name}")/>
                </NavLink>
            </p>
            <div>
                <h3>
                    <b>@m.Name</b>
                    <small class="text-secondary px-1">(@(m.ReleaseDate.ToString("yyyy-M")))</small>
                </h3>
                <p class="text-secondary">
                    @if (m.Duration == TimeSpan.Zero)
                    {
                        <span>时长未知</span>
                    }
                    else
                    {
                        <span>@m.Duration.TotalMinutes 分钟</span>
                    }
                    <span class="px-2">@m.Type</span>
                </p>
                @* <p>@m.Introduction</p> *@
                <p style="display: inline-flex; justify-content: center; width: 100%">
                    @if (m.Status == 1)
                    {
                        <button class="btn-primary btn" @onclick="() => ToShowInfo(m.Id)">
                                                @(m.ReleaseDate > DateTime.Now ? "预定" : "购票")
                                            </button>
                    }
                    else
                    {
                        <span style="height: 38px"></span>
                    }
                </p>
            </div>
        </div>
    }
</div>

<Popout @bind-Enable="_showPopout">
    <p><button class="btn btn-close px-3" @onclick="() => _showPopout = false"/></p>
    <MovieInfo Id="_popId"/>
</Popout>

@code
{
    bool _showPopout;
    Guid _popId;

    void Pop(string id)
    {
        _popId = Guid.Parse(id);
        _showPopout = true;
    }
    static async Task PE()
    {
        Console.WriteLine("test");
        await Global.App.Services.GetService<EventMgr>()!
            .Subscribe(DateTime.Now + TimeSpan.FromSeconds(5), () => PE());
    }
    List<Movie> _movies = new();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await using var db = new MgrContext();
        _movies = await db.Movies.DisplayMovie().ToListAsync();
    }

    async Task ToShowInfo(string st)
    {
        NavigationManager.NavigateTo($"/ShowInfo/{st}");
    }
}
