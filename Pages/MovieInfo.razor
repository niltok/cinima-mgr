@page "/Movie/Info/{Id:guid}"
@using cinima_mgr.Data
@using cinima_mgr.Service
@using Markdig
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject StateCache StateCache

<div class="container-form">
    @if(_found) {
        @if (_movie is null)
        {
            <p>加载中...</p>
        } 
        else
        {
            <PageTitle>@_movie.Name</PageTitle>
            <div class="movie-info-container">
                <img class="movie-cover" src=@($"/Movie/Cover/{Id}")/>
                <div class="movie-detail-container">
                    <div>
                        <h3>
                            <b>@_movie.Name</b>
                            <small class="text-secondary px-1">(@(_movie.ReleaseDate.ToString("yyyy-M")))</small>
                        </h3>
                        <div>
                            <small class="text-secondary">
                                @if (_movie.Duration == TimeSpan.Zero)
                                {
                                    <span>时长未知</span>
                                }
                                else
                                {
                                    <span>@_movie.Duration.TotalMinutes 分钟</span>
                                }
                                <span class="px-2">@_movie.Type</span>
                            </small>
                        </div>
                        <p>
                            @if (_movie.RateCount == 0)
                            {
                                <small>暂无评分</small>
                            }
                            else
                            {
                                <small>
                                    评分: @((_movie.RateSum / _movie.RateCount).ToString("N")) (@_movie.RateCount)
                                </small>
                            }
                        </p>
                        <div>@(new MarkupString(Markdown.ToHtml(_movie.Introduction, _pipeline)))</div>
                    </div>
                    @if (_movie.Status == 1)
                    {
                        <NavLink href=@($"/ShowInfo/{_movie.Id}")>
                            <button class="btn-primary btn">
                                @(_movie.ReleaseDate > DateTime.Now ? "预定" : "购票")
                            </button>
                        </NavLink>
                    }
                </div>
            </div>
            @if (_movie.Preview != "")
            {
                <div class="pv-container">
                    <iframe class="pv" 
                            src=@_movie.Preview 
                            border="0" 
                            framespacing="0" 
                            allow="fullscreen"></iframe>
                </div>
            }
            @if (_comment is not null) {
                <div class="comment-add">
                    <label style="grid-area: a;">评分: </label>
                    <input class="form-control" 
                           type="number" @bind="_comment.Rate" 
                           max="10" step="0.01" min="0" style="grid-area: b;"/>
                    <textarea class="form-control" @bind="_comment.Content" style="grid-area: c; height: 150px;">
                    </textarea>
                    <button @onclick="AddComment" 
                            disabled="@_processing" 
                            style="grid-area: d; align-self: self-end;" 
                            class="btn btn-primary">
                        @_btnName
                    </button>
                    <div style="grid-area: e;">@_msg</div>
                </div>
            }
            <div class="comments">
                @foreach (var c in _comments)
                {
                    <div class="comment">
                        <div style="margin-bottom: 0.3rem">
                            <b>@c.User.Name</b>
                            <small class="text-secondary px-3">评分: @c.Rate.ToString("N")</small>
                        </div>
                        <p>@(new MarkupString(Markdown.ToHtml(c.Content, _pipeline)))</p>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p>Sorry, 不存在该电影</p>
    }
</div>


@code {
    [Parameter]
    public Guid Id { get; set; }

    Movie? _movie;
    Comment? _comment;
    List<Comment> _comments = new();
    bool _found = true;
    string _btnName = "";
    bool _processing = false;
    string _msg = "";
    MarkdownPipeline _pipeline = new MarkdownPipelineBuilder()
        .DisableHtml()
        .UseSoftlineBreakAsHardlineBreak()
        .UseAutoLinks()
        .UseEmojiAndSmiley()
        .Build();
    
    async Task Init(MgrContext db)
    {
        _movie = await db.Movies.SingleAsync(m => m.Id == Id.ToString());
        if (_movie is null) _found = false;  // NavigationManager.NavigateTo("/404");
        else
        {
            _comments = await db.Comments
                .Where(c => c.Movie == _movie)
                .OrderByDescending(c => c.EditTime)
                .Include(c => c.User)
                .ToListAsync(); 
            if (StateCache.User is not null)
            {
                var cc = _comments.Find(c => c.UserId == StateCache.User.Name);
                if (cc is null)
                {
                    _btnName = "发布评论!";
                    _comment = new Comment
                    {
                        Id = Guid.NewGuid().ToString(),
                        Rate = 10
                    };
                }
                else
                {
                    _btnName = "修改评论!";
                    _comment = new Comment
                    {
                        Id = cc.Id,
                        Rate = cc.Rate,
                        Content = cc.Content
                    };
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _processing = true;
        await using var db = new MgrContext();
        await Init(db);
        _processing = false;
    }

    async Task AddComment()
    {
        _processing = true;
        try
        {
            await using var db = new MgrContext();
            var cc = await db.Comments.SingleOrDefaultAsync(c => c.Id == _comment!.Id);
            var mv = await db.Movies.SingleAsync(m => m.Id == _movie.Id);
            var usr = await db.Users.SingleAsync(u => u.Name == StateCache.User.Name);
            if (cc is null)
            {
                mv.RateCount++;
                mv.RateSum += _comment.Rate;
                _comment.CreateTime = DateTime.Now;
                _comment.EditTime = DateTime.Now;
                db.Comments.Add(_comment);
                _comment.Movie = mv;
                _comment.User = usr;
            }
            else
            {
                mv.RateSum += _comment.Rate - cc.Rate;
                cc.Content = _comment.Content;
                cc.Rate = _comment.Rate;
                cc.EditTime = DateTime.Now;
            }
            await db.SaveChangesAsync();
            _msg = "操作成功!";
            await Init(db);
        }
        catch (Exception e)
        {
            _msg = e.Message;
        }
        _processing = false;
    }
}