@page "/MovieMgr"
@using System.Buffers.Text
@implements IAsyncDisposable

<AuthUser RequireMgr="true"/>

<PageTitle>管理电影</PageTitle>

<div class="container-form">
    <p>
        <label>电影:</label>
        <select class="form-select" @onchange="e => SelectMovie((string) e.Value)">
            <option value="" selected=@(_selected == "")>[新建]</option>
            @foreach (var m in _label)
            {
                <option value=@m.Item1 selected=@(_selected == m.Item1)>@m.Item2</option>
            }
        </select>
    </p>
    <p>
        <label class="form-label">名称:</label>
        <input class="form-control" type="text" @bind="_movie.Name"/>
    </p>
    <p>
        <label>状态:</label>
        <select class="form-select" @bind="_movie.Status">
            <option value=0>已隐藏</option>
            <option value=1>在映</option>
            <option value=2>不在映</option>
        </select>
        <q><small>未到上映日期的在映电影显示为待映</small></q>
    </p>
    <p>
        <label>类型:</label>
        <input class="form-control" type="text" @bind="_movie.Type"/>
    </p>
    <p>
        <label>简介:</label>
        <textarea class="form-control" @bind="_movie.Introduction" style="height: 300px"></textarea>
    </p>
    <p>
        <label>时长(分钟):</label>
        <input class="form-control" type="number" @bind="_duration"/>
    </p>
    <p>
        <label>上映日期:</label>
        <input class="form-control" type="date" @bind="_movie.ReleaseDate"/>
    </p>
    <p>
        <label>预告片:</label>
        <input class="form-control" type="text" @bind="_movie.Preview"/>
    </p>
    <p>
        <label>图片:</label>
        @if (_movie.Cover.Data is not null)
        {
            <img class="movie_cover" 
                 src=@($"data:image/jpg;base64,{Convert.ToBase64String(_movie.Cover.Data)}") 
                 alt=@($"Cover of {_movie.Name}")/>
        }
        <InputFile class="px-2" OnChange="UploadFile"></InputFile>
    </p>
    <p>
        <button class="btn-primary btn" @onclick="AddMovieEvent" disabled="@(_status != 0)">
            @(_status == 2 ? "文件上传中..." : _selected == "" ? "添加!" : "修改!")
        </button>
    </p>
</div>

<MsgBox Msg="@_msg"/>

@code {
    MgrContext _db = new();

    string _msg = "";
    int _duration = 0;
    int _status = 0;
    Movie _movie = new()
    {
        Id = Guid.NewGuid().ToString(),
        Name = "",
        BoxOffice = 0,
        Type = "",
        Introduction = "",
        ReleaseDate = DateTime.Today,
        Status = 0,
        Preview = "",
        Cover = new Binary
        {
            Id = Guid.NewGuid().ToString()
        }
    };

    Dictionary<string, Movie> _movies = new();
    List<(string, string)> _label = new();
    string _selected = "";

    async Task LoadLabel()
    {
        if (_status != 0)
        {
            _msg = "Busyyyyyyyyyy!!!";
            return;
        }
        _status = 1;
        _movies = await _db.Movies.ToDictionaryAsync(m => m.Id);
        _label = _movies.Values
            .DisplayMovie(true)
            .Select(m => (m.Id, $"{m.Name}({m.ReleaseDate:yyyy-M}){m.StatusLabel()}"))
            .ToList();
        _status = 0;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadLabel();
    }

    async Task SelectMovie(string s)
    {
        if (_status != 0)
        {
            _msg = "Busyyyyyyyyyy!!!";
            return;
        }
        _status = 1;
        if (_selected != "") await _db.Entry(_movie).ReloadAsync();
        _selected = s;
        _movie = _movies.GetValueOrDefault(s) ?? new Movie
        {
            Id = Guid.NewGuid().ToString(),
            Name = "",
            BoxOffice = 0,
            Type = "",
            Introduction = "",
            ReleaseDate = DateTime.Today,
            Status = 0,
            Preview = "",
            Cover = new Binary
            {
                Id = Guid.NewGuid().ToString()
            }
        };
        if (_selected != "") 
            await _db.Entry(_movie).Reference(m => m.Cover).LoadAsync();
        _status = 0;
        _duration = (int)_movie.Duration.TotalMinutes;
    }

    async Task UploadFile(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;
        if (_status != 0)
        {
            _msg = "Busyyyyyyyyyy!!!";
            return;
        }
        _status = 2;
        var ms = new MemoryStream();
        try
        {
            _msg = "文件上传中";
            await e.File.OpenReadStream(5 * 1024 * 1024).CopyToAsync(ms);
            _movie.Cover.Data = ms.ToArray();
            _msg = "文件上传成功";
        }
        catch (Exception ex)
        {
            _msg = ex.Message;
        }
        _status = 0;
    }

    async Task AddMovieEvent()
    {
        if (_movie.Name == "")
        {
            _msg = "电影名不能为空";
            return;
        }
        if (_movie.Cover.Data is null)
        {
            _msg = "封面不能为空";
            return;
        }
        if (_status != 0)
        {
            _msg = "Busyyyyyyyyyy!!!";
            return;
        }
        _status = 1;
        _movie.Duration = TimeSpan.FromMinutes(_duration);
        if (_selected == "")
        {
            _db.Movies.Add(_movie);
        }
        await _db.SaveChangesAsync();
        _status = 0;
        await LoadLabel();
        _msg = (_selected == "" ? "添加" : "修改") + "成功 " + _movie.Name;
        _selected = _movie.Id;
    }

    public async ValueTask DisposeAsync()
    {
        await _db.DisposeAsync();
    }
}