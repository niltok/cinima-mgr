@page "/OrderConfirm/{OrderType:int}/{Days:int}"
@page "/OrderConfirm/{OrderType:int}/{ShowId}/{PosSelecition}"
@using cinima_mgr.Data
@using cinima_mgr.Service
@using Markdig.Helpers
@using Microsoft.EntityFrameworkCore
@using Org.BouncyCastle.Utilities
@inject NavigationManager NavigationManager
@inject StateCache StateCache

<h3>确认订单信息</h3>
@if ( OrderType == 0 )
{
    <div>
        <p> 订单号: @_order.Id </p>
        <p> 用户名: @_order.User.Name </p>
        <p> 电影名称: @show.Movie.Name </p>
        <p> 日期: @show.Time.ToString("MM月dd日") </p>
        @{ var _tempinfo = show.Time.ToString("hh:mm ~ ") + (show.Time + show.Movie.Duration).ToString("hh:mm"); }
        <p> 场次时间: @_tempinfo </p>
        <p> 房间: @show.Room.Name </p>
        <p> 购票数量: @_pos.Count().ToString() </p>

        @{
            _tempinfo = "";
            foreach (var i in _pos) _tempinfo += i + "、";
            if (_pos.Count() != 0) _tempinfo = _tempinfo.Substring(0, _tempinfo.Length - 1);
        }
        <p> 位置: @_tempinfo </p>
    </div><br/>
    
    <EditForm Model="model">
        <div>
            <InputSelect TValue="string" @bind-Value="_selectedDT">
                @foreach (var i in _discounttickets)
                {
                    // switch (i.Type)
                    // {
                    //     case 0:
                    //         
                    //         break;
                    //     case 1:
                    //     case 2:
                    //         break;
                    // }
                    <option value="@i.Id" > @i.Name </option>
                }
            </InputSelect>
        </div><br/>
    </EditForm>
}else if ( OrderType == 1 )
{
    <div>
        <p> 订单号: @_order.Id </p>
        <p> 用户名: @_order.User.Name </p>
        <p> 购买时长: @Days 天 </p>
        @* todo: 购买会员价格  *@
        <p> 支付金额: ？元 </p>
    </div>
}

<div>
    <button @onclick="Payment" > 立即付款 </button>
</div>

@* <Allipay Enable="ToPay" OrderId="@_order.Id" /> *@

@code {
    [Parameter]
    public int OrderType { get; set; }
    [Parameter]
    public int Days { get; set; }
    [Parameter]
    public string ShowId { get; set; }
    [Parameter]
    public string PosSelecition { get; set; }

    Order _order = new()
    {
        Id = Guid.NewGuid().ToString(),
        Tickets = new List<Ticket>(),
        Discounts = new List<DiscountTicket>()
    };

    public List<string> _pos = new List<string>();
    public List<DiscountTicket> _discounttickets = new List<DiscountTicket>();
    Dictionary<DiscountTicket, double> _sorteddisticked = new Dictionary<DiscountTicket, double>();
    public string _selectedDT;
    public Show show;
    public string _info = "";
    public bool ToPay = false;
    
    public inputmodel model = new inputmodel();
    
    public class inputmodel {}

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (StateCache.User is null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }

        _order.User = StateCache.User;
        _order.Type = OrderType;
        _order.State = 0;
        
        if (OrderType == 0)
        {
            await using var db = new MgrContext();
            show = await db.Shows.Where(t => t.Id == ShowId).Include(t => t.Room).
                                    Include(t => t.Movie).SingleAsync();
            int cnt = 0;
            char[] _posstate = PosSelecition.ToCharArray();
            foreach (var i in _posstate)
            {
                if (i == '3')
                {
                    _posstate[cnt] = '1';
                    Ticket ticket = new()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Order = _order,
                        Show = show,
                        CreatTime = DateTime.Now,
                        // todo: 更改票状态
                    
                        Status = 0,
                        Row = cnt / show.Room.Width + 1,
                        Column = cnt % show.Room.Width + 1
                    };
                    // db.Tickets.Add(ticket) ;
                    // await db.SaveChangesAsync();
                    _order.Tickets.Add(ticket);
                    await db.SaveChangesAsync();
                    _pos.Add($"{ticket.Row}排{ticket.Column}座");
                }
                cnt++;
            }
            show = await db.Shows.Where(t => t.Id == ShowId).Include(t => t.Room).
                Include(t => t.Movie).SingleAsync();
            foreach (var i in _order.Tickets)
            {
                if (show.PosState[(i.Row - 1) * show.Room.Width + (i.Column - 1)] != '0')
                {
                    // todo: 弹窗提示座位已选
                    return;
                }
            }
            // todo: change PosState
            show.PosState = new string(_posstate);
            await db.SaveChangesAsync();

            _discounttickets = await db.DiscountTickets.Where(t => t.User == StateCache.User).ToListAsync();
            
            // _discounttickets.OrderBy(t => t.Type == 1 ? t.Rate)
            
        }else if (OrderType == 1)
        {
            _order.Days = Days;
            _order.Price = 30.0;
        }

    }

    async Task Payment()
    {
        await using var db = new MgrContext();
        _order.CreateTime = DateTime.Now;
        db.Orders.Add(_order);
        ToPay = true;
    // NavigationManager.NavigateTo($"//{}");NavigationManager.NavigateTo($"//{}");
    }
}