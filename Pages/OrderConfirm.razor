@page "/OrderConfirm/{OrderType:int}/{Days:int}"
@page "/OrderConfirm/{OrderType:int}/{ShowId}/{PosSelecition}"
@using cinima_mgr.Data
@using cinima_mgr.Service
@using Markdig.Helpers
@using Microsoft.EntityFrameworkCore
@using Org.BouncyCastle.Utilities
@inject NavigationManager NavigationManager
@inject StateCache StateCache
@implements IAsyncDisposable

<main class="container-form">
    
    <h3>确认订单信息</h3>
    
    @if (OrderType == 0)
    {
        <div>
            <p> 订单号: @_order.Id </p>
            <p> 用户名: @_order.User.Name </p>
            <p> 电影名称: @show.Movie.Name </p>
            <p> 日期: @show.Time.ToString("MM月dd日") </p>
            @{ var _tempinfo = show.Time.ToString("hh:mm ~ ") + (show.Time + show.Movie.Duration).ToString("hh:mm"); }
            <p> 场次时间: @_tempinfo </p>
            <p> 房间: @show.Room.Name </p>
            <p> 购票数量: @_pos.Count().ToString() </p>

            @{
                _tempinfo = "";
                foreach (var i in _pos) _tempinfo += i + "、";
                if (_pos.Count() != 0) _tempinfo = _tempinfo.Substring(0, _tempinfo.Length - 1);
            }
            <p> 位置: @_tempinfo </p>
        </div><br/>

        <EditForm Model="model">
            <div>
                <p> 选择优惠卷: </p>
                @if (_discounttickets.Count != 0)
                {
                    <InputSelect TValue="string" @bind-Value="_selectedDT">
                        @foreach (var i in _discounttickets)
                        {
                            _tempinfo = (i.Type == 1 ? $"满{i.Satisfy}减{i.Rate}" : $"{i.Rate * 10}折") + i.Name;
                            <option value="@i.Id"> @_tempinfo </option>
                        }
                    </InputSelect>
                }
                else
                {
                    <p> 无可用优惠卷！ </p>
                }
            </div><br/>
        </EditForm>
        <div>
            <p> 原始价格: @_order.OriginalPrice </p>
            @if (_selectedDT != null)
            {
                <p> 优惠价格: @_order.Price </p>
            }
        </div>
    }
    else if (OrderType == 1)
    {
        <div>
            <p> 订单号: @_order.Id </p>
            <p> 用户名: @_order.User.Name </p>
            <p> 购买时长: @Days 天 </p>
            @* todo: 购买会员价格  *@
            <p> 支付金额: ？元 </p>
        </div>
    }

    <div>
        @if (_poserror)
        {
            string _src = $"/ShowInfo/{show.Movie.Id}";
            <MsgBox Msg="座位已经被其他人抢先了(；′⌒`)" OnClosed="() => { NavigationManager.NavigateTo(_src); }"></MsgBox>
        }
        else
        {
            <button @onclick="Payment"> 立即付款 </button>
            @if (ToPay)
            {
                <Alipay Enable="ToPay" out_trade_no="@_order.Id" TaskId="@_taskid"/>
            }
        }
    </div>
</main>


@code {
    [Parameter]
    public int OrderType { get; set; }
    [Parameter]
    public int Days { get; set; }
    [Parameter]
    public string ShowId { get; set; }
    [Parameter]
    public string PosSelecition { get; set; }

    Order _order = new()
    {
        Id = Guid.NewGuid().ToString(),
        Tickets = new List<Ticket>(),
        Discounts = new List<DiscountTicket>()
    };

    MgrContext db = new MgrContext();
    public List<string> _pos = new List<string>();
    public List<DiscountTicket> _discounttickets = new List<DiscountTicket>();
    // Dictionary<DiscountTicket, double> _sorteddisticked = new Dictionary<DiscountTicket, double>();
    public string _selectedDT;
    public Show show;
    public string _info = "";
    public string _taskid;
    public bool ToPay = false;
    public bool _poserror = false;
    
    public inputmodel model = new inputmodel();
    
    public class inputmodel {}

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (StateCache.User is null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }

        _order.User = await db.Users.SingleAsync(t => t.Name == StateCache.User.Name);
        _order.Type = OrderType;
        _order.State = 0;
        
        if (OrderType == 0)
        {
            show = await db.Shows.Where(t => t.Id == ShowId).Include(t => t.Room).
                                    Include(t => t.Movie).SingleAsync();
            
            int cnt = 0;
            char[] _posstate = PosSelecition.ToCharArray();
            foreach (var i in _posstate)
            {
                if (i == '3')
                {
                    _posstate[cnt] = '1';
                    Ticket ticket = new()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Order = _order,
                        Show = show,
                        CreatTime = DateTime.Now,
                        // todo: 更改票状态
                        Status = 0,
                        Row = cnt / show.Room.Width + 1,
                        Column = cnt % show.Room.Width + 1
                    };
                    // db.Tickets.Add(ticket) ;
                    // await db.SaveChangesAsync();
                    _order.Tickets.Add(ticket);
                    await db.SaveChangesAsync();
                    _pos.Add($"{ticket.Row}排{ticket.Column}座");
                }
                cnt++;
            }
            show = await db.Shows.Where(t => t.Id == ShowId).Include(t => t.Room).
                Include(t => t.Movie).SingleAsync();
            
            foreach (var i in _order.Tickets)
            {
                if (show.PosState[(i.Row - 1) * show.Room.Width + (i.Column - 1)] != '0')
                    _poserror = true;
            }
            if (!_poserror)
            {
                show.PosState = new string(_posstate);
                await db.SaveChangesAsync();
            }
            
            _order.OriginalPrice = show.BasePrice * _order.Tickets.Count();
            _discounttickets = await db.DiscountTickets.Where(t => t.User == StateCache.User && t.Type != 0 && _order.OriginalPrice > t.Satisfy).ToListAsync();
            
            // _discounttickets.OrderBy(t => t.Type == 1 ? t.Rate)
            
        }else if (OrderType == 1)
        {
            _order.Days = Days;
            _order.Price = 30.0;
            _order.OriginalPrice = _order.Price;
        }

    }

    public static async Task CancelOrder(string _orderid)
    {
        await using var _db = new MgrContext();
        var _order = await _db.Orders.Where(t => t.Id == _orderid)
            .Include(t => t.Tickets).SingleOrDefaultAsync();
        if (_order != null && _order.Type == 0)
        {
            Ticket _ticket = await _db.Tickets.Where(t => t.Id == _order.Tickets.First().Id)
                .Include(t => t.Show).SingleAsync();
            Show _show = await _db.Shows.Where(t => t.Id == _ticket.Show.Id)
                .Include(t => t.Room).SingleAsync();
            
            char[] _possta = _show.PosState.ToCharArray();
            foreach (var i in _order.Tickets)
            {
                _possta[(i.Row - 1) * _show.Room.Width + (i.Column - 1)] = '0';
            }
            _show.PosState = new string(_possta);
            _order.Type = 3;
            _order.CancelTime = DateTime.Now;
            await _db.SaveChangesAsync();
        }
    }

    async Task Payment()
    {
        _order.CreateTime = DateTime.Now;
        
        if (_selectedDT != null)
        {
            DiscountTicket _sdt = await db.DiscountTickets.Where(t => t.Id == _selectedDT).SingleAsync();
            _order.Discounts.Add(_sdt);
            _order.Price = _sdt.Type == 1 ? ((_order.OriginalPrice - _sdt.Rate) > 0 ? (_order.OriginalPrice - _sdt.Rate) : 0)
                : (_order.OriginalPrice * _sdt.Rate);
        }
        else
        {
            _order.Price = _order.OriginalPrice;
        }
        db.Orders.Add(_order);
        await db.SaveChangesAsync();
        // todo: cansel ticket 
        _taskid = await Global.App.Services.GetService<EventMgr>()!.Subscribe(
            DateTime.Now + TimeSpan.FromMinutes(15),
                () => OrderConfirm.CancelOrder(_order.Id));
        ToPay = true;
    // NavigationManager.NavigateTo($"//{}");NavigationManager.NavigateTo($"//{}");
    }

    public async ValueTask DisposeAsync()
    {
        await db.DisposeAsync();
    }

}