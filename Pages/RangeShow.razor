@page "/Show/Range"
@using cinima_mgr.Data
@using cinima_mgr.Service
@using Microsoft.EntityFrameworkCore
@using cinima_mgr.Ali
@inject StateCache StateCache
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<AuthUser RequireMgr="true"/>

<PageTitle>安排场次</PageTitle>

<div class="container-form">
    <p>
        <label>房间:</label>
        <select class="form-control selector" @onchange="e => SelectRoom(e.Value?.ToString())">
            @foreach (var r in _rooms)
            {
                <option value=@r.Key>@r.Key</option>
            }
        </select>
    </p>
    @if (_room is not null)
    {
        <p>
            <label>场次:</label>
            <select class="form-control" @onchange="e => SelectShow(e.Value.ToString())">
                <option value="" selected=@(_selectedShow == "")>[新建]</option>
                @foreach (var s in _showLabel)
                {
                    <option value=@s.Item1 selected=@(_selectedShow == s.Item1)>@s.Item2</option>
                }
            </select>
        </p>
        <p>
            <label>状态:</label>
            <select class="form-control" 
                    @onchange=@(e => ShowStatusChanged(int.Parse((string) e.Value!)))>
                <option value=0 selected="@(_show.Status == 0)">隐藏</option>
                <option value=1 selected="@(_show.Status == 1)">启用</option>
                <option value=2 selected="@(_show.Status == 2)">取消</option>
            </select>
        </p>
        <p>
            <label>基准价格:</label>
            <input class="form-control" type="number" @bind="_show.BasePrice" min="0" step="0.01"/>
        </p>
        <p>
            <label>放映时间:</label>
            <input class="form-control" type="datetime-local" @bind="_show.Time"/>
            <span> ~ @((_show.Time + _show.Movie.Duration).ToString("HH:mm"))</span>
        </p>
        <p>
            <label>可购买时间:</label>
            <input class="form-control" type="datetime-local" @bind="_show.CanBuyAfter"/>
            <q class="small">状态为启用时未到时间不可购买</q>
        </p>
        <p>
            <MoviePicker Movies="_movies" @bind-Movie="_show.Movie" ShowRelease="true"/>
        </p>
        <p style="line-height: 3rem">
            <button @onclick="ResetState" class="btn btn-secondary">重置可用座位至房间状态</button>
            <button @onclick="FilterSkip" class="btn btn-secondary">选择间隔座位（疫情专用）</button>
        </p>
        <p>
            <span style="display: flex; justify-content: center;">
                <SitPicker @bind-PosState="_show.PosState" Height="_room.Height" Width="_room.Width" Dev="true"/>
            </span>
        </p>
        <p>
            <button class="btn btn-primary" @onclick="Submit" disabled="@_lock">
                @(_selectedShow == "" ? "添加!" : "保存!")
            </button>
        </p>
    }
</div>

<MsgBox Msg="@_msg"/>

@code {
    MgrContext _db = new();
    string _msg = "";

    bool _lock;

    Dictionary<string, RoomTemplate> _rooms = new();
    RoomTemplate? _room;

    Dictionary<string, Show> _shows = new();
    string _selectedShow = "";
    Show _show = new ();
    List<(string, string)> _showLabel = new();

    List<Movie> _movies = new();
    readonly string[] _statusLabel = {"[已隐藏]", "", "[已取消]"};

    void ShowStatusChanged(int s)
    {
        if (s != 1 && _show.Status == 1)
        {
            _msg = $"[{DateTime.Now}]\n\n ## 警告 \n\n 隐藏或取消场次会在保存时 \n\n 为所有未使用票**退款** \n\n **取消**所有未付款订单";
        }
        _show.Status = s;
    }

    void LoadLabel()
    {
        _showLabel = _room.Shows.Where(s => s.Time > DateTime.Now)
            .OrderByDescending(s => s.Time).Select(s =>
        {
            var st = s.Time.ToString("MM-dd HH:mm");
            var et = (s.Time + s.Movie.Duration).ToString("HH:mm");
            return (s.Id, $"{st} ~ {et} ({s.Movie.Name}) {_statusLabel[s.Status]}");
        }).ToList();
    }

    async Task Load()
    {
        _db.ChangeTracker.Clear();
        
        _movies = await _db.Movies
            .Include(m => m.Shows)
            .DisplayMovie(true)
            .ToListAsync();
        _rooms = await _db.RoomTemplates
            .Where(r => r.Status == 1)
            .Include(r => r.Shows)
            .ToDictionaryAsync(r => r.Name);
        if (_rooms.Count > 0)
        {
            _room = _rooms.First().Value;
            _show.PosState = _room.PosState;
            await Task.WhenAll(_room.Shows.Select(s => Task.WhenAll(
                _db.Entry(s).Reference(s => s.Movie).LoadAsync(), 
                _db.Entry(s).Collection(s => s.Tickets).LoadAsync())));
            _shows = _room.Shows.ToDictionary(s => s.Id);
            LoadLabel();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Load();
        if (_room is not null)
        {
            _show = new Show
            {
                Id = Guid.NewGuid().ToString(),
                Time = DateTime.Now,
                PosState = _room.PosState,
                Room = _room,
                Movie = _movies.First(),
                BasePrice = 0,
                CanBuyAfter = DateTime.Now,
                Status = 0
            };
        }
    }

    void ResetState()
    {
        _show.PosState = _room.PosState;
    }

    async Task SelectRoom(string? s)
    {
        if (_selectedShow != "") await _db.Entry(_show).ReloadAsync();
        _room = _rooms.ContainsKey(s) ? _rooms[s] : null;
        if (_room is null) return;
        _shows = _room.Shows.ToDictionary(s => s.Id);
        LoadLabel();
        _selectedShow = "";
        _show = new Show
        {
            Id = Guid.NewGuid().ToString(),
            Time = DateTime.Now,
            PosState = _room.PosState,
            Room = _room,
            Movie = _movies.First(),
            BasePrice = 0,
            CanBuyAfter = DateTime.Now,
            Status = 0
        };
    }

    async Task SelectShow(string s)
    {
        if (_selectedShow != "") await _db.Entry(_show).ReloadAsync();
        _selectedShow = s;
        _show = s != "" ? _shows[s] : new Show
        {
            Id = Guid.NewGuid().ToString(),
            Time = DateTime.Now,
            PosState = _room.PosState,
            Room = _room,
            Movie = _movies.First(),
            BasePrice = 0,
            CanBuyAfter = DateTime.Now,
            Status = 0
        };
    }

    async Task Submit()
    {
        try
        {
            if (_show.Time <= DateTime.Now)
            {
                _msg = $"[{DateTime.Now}] 放映时间不能比现在早";
                return;
            }
            var conflict = _room.Shows.FirstOrDefault(s => !(s == _show || 
                                                             s.Time + s.Movie.Duration < _show.Time || 
                                                             _show.Time + _show.Movie.Duration < s.Time));
            if (conflict is not null)
            {
                var st = conflict.Time.ToString("yyyy-MM-dd HH:mm");
                var et = (conflict.Time + conflict.Movie.Duration).ToString("HH:mm");
                _msg = $"[{DateTime.Now}] 时间冲突 {st} ~ {et} ({conflict.Movie.Name})";
                return;
            }
            if (_lock) return;
            _lock = true;
            _msg = $"[{DateTime.Now}] 保存中";
            await InvokeAsync(StateHasChanged);
            if (_selectedShow == "")
            {
                _show.Movie.Shows.Add(_show);
            }
            else if (_show.Status != 1)
            {
                await _db.Entry(_show).Collection(s => s.Tickets).LoadAsync();
                await Task.WhenAll(_show.Tickets.Select(t =>
                    _db.Entry(t).Reference(t => t.Order).LoadAsync()));
                foreach (var o in _show.Tickets
                    .GroupBy(t => t.Order)
                    .Select(g => g.Key))
                {
                    switch (o.State)
                    {
                        case 0:
                            {
                                await using var db = new MgrContext();
                                var e = await db.Events.SingleAsync(e => e.Id == o.TaskId);
                                db.Events.Remove(e);
                                await db.SaveChangesAsync();
                                await OrderConfirm.CancelOrder(o.Id);
                            }
                            break;
                        case 1:
                            await Refund.refund(o.Id, (Math.Floor(o.Price * 100) / 100).ToString("N2"));
                            break;
                    }
                }
            }
            var fail = true;
            do
            {
                try
                {
                    await _db.SaveChangesAsync();
                    fail = false;
                }
                catch (DbUpdateConcurrencyException ex)
                {
                    await Task.WhenAll(ex.Entries.Select(e => e.ReloadAsync()));
                }
            } while (fail);
            await Load();
            _lock = false;
            _msg = $"[{DateTime.Now}] " + (_selectedShow == "" ? "添加" : "保存") + "成功 " + DateTime.Now.ToString("HH:mm:ss");
            _selectedShow = _show.Id;
        }
        catch (Exception ex)
        {
            _msg = $"[{DateTime.Now}] 错误: {ex.Message}";
            throw;
        }
    }

    private void FilterSkip()
    {
        _show.PosState = PosStateHelper.FilterSkip1(_show.PosState, _room.Height, _room.Width);
    }

    public async ValueTask DisposeAsync()
    {
        await _db.DisposeAsync();
    }

}
