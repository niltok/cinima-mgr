@page "/ShowInfo/{MovieId}"
@using cinima_mgr.Data
@using cinima_mgr.Service
@using Microsoft.AspNetCore.Mvc
@inject StateCache StateCache
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle> 场次信息 </PageTitle>

<h3>ShowInfo</h3>
@* todo: 选择电影  *@
<main>
    <MoviePicker></MoviePicker>
    <EditForm Model="model">
        <div class="top-row px-4">
            <InputRadioGroup ValueChanged="((DateTime dt) => FlashShowsInfoEvent(dt))"
                             ValueExpression="() => _selectedday"
                             Value="_selectedday">
                @foreach (var i in _daysinfo)
                {
                    <InputRadio Value="@i"/>
                    <label> @i.ToString("MM月dd日") </label>
                }
            </InputRadioGroup><br/>
            <InputRadioGroup ValueChanged="(string st) => FindSelectedShow(st)"
                             ValueExpression="() => _selectedshowId"
                             Value="_selectedshowId">
                @foreach (var i in _showsinfo)
                {
                    var _printime = i.Time.ToString("HH:mm") + " ~ " + (i.Time + i.Movie.Duration).ToString("HH:mm");
                    <InputRadio Value="@i.Id"/>
                    <label> @_printime </label>
                }
            </InputRadioGroup><br/>
        </div><br>
    </EditForm>
    <div>
        @if (_selectedshowId != null)
        {
            <div style="max-width: 500px; width: 80%">
                <SitPicker @bind-PosState="_selectedshow.PosState"
                           Height="_selectedshow.Room.Height"
                           Width="_selectedshow.Room.Width"
                           State1="'0'" State2="'3'"/>
            </div>
            <div>
                <button @onclick="MakeOrder"> 确认订单 </button>
            </div>
        }
        else
        {
            <label> 无场次信息 </label>
        }
    </div>
</main>

@code{
    [Parameter]
    public string MovieId { get; set; }

    public List<Show> _showsinfo = new List<Show>();
    
    public List<DateTime> _daysinfo = new List<DateTime>();

    public DateTime _selectedday;

    public string _selectedshowId;
    
    public Show _selectedshow;

    public inputmodel model = new inputmodel();
    
    public class inputmodel
    {
        
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (StateCache.User is null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }
        // todo: show canceled disabled or canbuyafter
        await using var db = new MgrContext();
        _showsinfo = (await db.Shows
            .Where(t => t.Movie.Id == MovieId && t.Status == 1).Include(t => t.Movie).ToListAsync())
            .Where(t => t.Time + t.Movie.Duration > DateTime.Now).OrderBy(t => t.Time).ToList();
        _daysinfo = _showsinfo.DistinctBy(t => t.Time.Day).Select(t => t.Time).ToList();

        if (_daysinfo.Count > 0)
        {
            _selectedday = _daysinfo.First();
        }
        if (_showsinfo.Count > 0)
        {
            _showsinfo = _showsinfo.Where(t => t.Time.Day == _selectedday.Day).ToList();
        }
        
    }

    async Task FlashShowsInfoEvent(DateTime dt)
    {
        _selectedday = dt;
        await using var db = new MgrContext();
        _showsinfo = (await db.Shows
            .Where(t => t.Movie.Id == MovieId)
            .Include(t => t.Movie).ToListAsync())
            .Where(t => t.Time.Day == _selectedday.Day && t.Time + t.Movie.Duration > DateTime.Now).ToList();
        int i;
    }

    async Task FindSelectedShow(string st)
    {
        _selectedshowId = st;
        await using var db = new MgrContext();
        _selectedshow = (await db.Shows
            .Where(t => t.Id == _selectedshowId)
            .Include(t => t.Room)
            .ToListAsync()).First();
    }

    async Task MakeOrder()
    {
        NavigationManager.NavigateTo($"/OrderConfirm/{0}/{_selectedshowId}/{_selectedshow.PosState}");
        // NavigationManager.NavigateTo($"/OrderConfirm/{1}/{30}");

        
    }

}