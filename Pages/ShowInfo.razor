@page "/ShowInfo/{MovieId}"
@using cinima_mgr.Data
@using cinima_mgr.Service
@using Markdig.Helpers
@using Markdig.Syntax
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc
@inject StateCache StateCache
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle> 选座购票 </PageTitle>

<main class="container-form">
    <p>
        <MoviePicker Movies="_allmovies" Movie="_selectedmovie" MovieChanged="(Movie mv) => ChangeMovie(mv)" />
    </p>
    <EditForm Model="model">
        <div class="top-row px-4">
            @if ( _daysinfo.Count != 0 )
            {
                <InputRadioGroup ValueChanged="(DateTime dt) => FlashShowsInfoEvent(dt)"
                                 ValueExpression="() => _selectedday"
                                 Value="_selectedday">
                    <div class="toggle">
                        @foreach (var i in _daysinfo)
                        {
                            <InputRadio Value="@i" AdditionalAttributes="@(new Dictionary<string, object>{["id"]="radio"+i, ["style"]="display:none"})"/>
                            <label for=@("radio"+i) > @i.ToString("MM月dd日") </label>
                        }
                    </div>
                </InputRadioGroup>
                <br/>
                <InputRadioGroup ValueChanged="(string st) => FindSelectedShow(st)"
                                 ValueExpression="() => _selectedshowId"
                                 Value="_selectedshowId">
                    <div class="toggle">
                        @foreach (var i in _showsinfo)
                        {
                            var _printime = i.Time.ToString("HH:mm") + " ~ " + (i.Time + i.Movie.Duration).ToString("HH:mm");
                            <InputRadio Value="@i.Id" AdditionalAttributes="@(new Dictionary<string, object>{["id"]="radio"+i.Id, ["style"]="display:none"})"/>
                            <label for=@("radio"+i.Id)> @_printime </label>
                        }
                    </div>
                </InputRadioGroup><br/>
            }else { <h3 style="margin-left: 20px"> 当前电影没有日期正在上映！ </h3> }
        </div><br>
    </EditForm>
    <div>
        @if (_selectedshowId != null)
        {
            if (_selectedshow.CanBuyAfter < DateTime.Now)
            {
                <p>
                    <span style="display: flex; justify-content: center;">
                        <SitPicker @bind-PosState="_selectedshow.PosState"
                                   Height="_selectedshow.Room.Height"
                                   Width="_selectedshow.Room.Width"
                                   State1="'0'" State2="'3'"/>
                    </span>
                </p>
                <br/>
                <div style="display: flex; flex-direction: column; align-items: center">
                    <button class="btn btn-primary" @onclick="MakeOrder"> 确认选座 </button>
                </div>
                @if (_poserror) { <MsgBox Msg="不要妨碍叔叔赚钱！" OnClosed="() => _poserror = false"></MsgBox> }
                <p></p>
                <p></p>
            }
            else
            {
                <h3 style="margin-left: 20px"> @_selectedshow.CanBuyAfter.ToString("MM月dd日hh:mm") 开售，敬请期待！ </h3>
            }
        }
    </div>
</main>

@code{

    [Parameter]
    public string MovieId { get; set; }

    List<Movie> _allmovies = new List<Movie>();

    public List<Show> _showsinfo = new List<Show>();

    public List<DateTime> _daysinfo = new List<DateTime>();

    public DateTime _selectedday;

    public string _selectedshowId;

    public string _selectedshowOP;

    public Show _selectedshow;

    public Movie _selectedmovie;

    bool _poserror = false;

    public inputmodel model = new inputmodel();

    public class inputmodel
    {

    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (StateCache.User is null)
        {
            NavigationManager.NavigateTo("/Login");
            return;
        }

        LoadInfo();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        LoadInfo();
    }

    async void LoadInfo()
    {
        await using var db = new MgrContext();

        _allmovies = await db.Movies.DisplayMovie(false, false).ToListAsync();
        _selectedmovie = await db.Movies.SingleAsync(t => t.Id == MovieId);
        _selectedshowId = null;

        _showsinfo = (await db.Shows
            .Where(t => t.Movie.Id == MovieId && t.Status == 1).Include(t => t.Movie).ToListAsync())
            .Where(t => t.Time + t.Movie.Duration > DateTime.Now).OrderBy(t => t.Time).ToList();
        _daysinfo = _showsinfo.DistinctBy(t => t.Time.Day).Select(t => t.Time).ToList();

        if (_daysinfo.Count > 0)
        {
            _selectedday = _daysinfo.First();
        }
        if (_showsinfo.Count > 0)
        {
            _showsinfo = _showsinfo.Where(t => t.Time.Day == _selectedday.Day).ToList();
        }
    }

    async Task FlashShowsInfoEvent(DateTime dt)
    {
        _selectedday = dt;
        _selectedshowId = null;
        _selectedshow = null;
        await using var db = new MgrContext();
        _showsinfo = (await db.Shows
            .Where(t => t.Movie.Id == MovieId)
            .Include(t => t.Movie).ToListAsync())
            .Where(t => t.Time.Day == _selectedday.Day && t.Time + t.Movie.Duration > DateTime.Now).ToList();
    }

    async Task FindSelectedShow(string st)
    {
        _selectedshowId = st;
        await using var db = new MgrContext();
        _selectedshow = (await db.Shows
            .Where(t => t.Id == _selectedshowId)
            .Include(t => t.Room)
            .ToListAsync()).First();
        _selectedshowOP = _selectedshow.PosState;
    }

    async Task ChangeMovie(Movie mv)
    {
        NavigationManager.NavigateTo($"/ShowInfo/{mv.Id}");
    }

    async Task MakeOrder()
    {
        if (_selectedshow.PosState != _selectedshowOP)
        {
            _poserror = false;
            NavigationManager.NavigateTo($"/OrderConfirm/{0}/{_selectedshowId}/{_selectedshow.PosState}");
        }
        else
        {
            _poserror = true;
        }
        // NavigationManager.NavigateTo($"/OrderConfirm/{1}/{30}/{30.0}/{"VIPOrder"}");
    }
}