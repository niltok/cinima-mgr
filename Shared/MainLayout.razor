@using cinima_mgr.Data
@using cinima_mgr.Service
@using Microsoft.EntityFrameworkCore
@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject StateCache StateCache
@inject NavigationManager NavigationManager

<PageTitle>喵票票</PageTitle>

@if (_loading)
{
    <h1 style="position: fixed; width: fit-content; top:  50%; left: 50%; transform: translate(-50%, -50%)">
        🛫 加载中...
    </h1>
}
else
{
<div class="page">
    <div class="sidebar">
        <NavMenu Logined="_user is not null" IsMgr="_user is not null && _user.IsMgr"/>
    </div>

    <main>
        <div class="top-row px-4">
            @if (_user is null)
            {
                <NavLink class="nav" href="/Login">登录</NavLink>
                <NavLink class="nav" href="/Register">注册</NavLink>
            }
            else
            {
                <span class="px-2">
                    <NavLink>
                        @if (StateCache.User.VIPExpireTime < DateTime.Now)
                        {
                            @("充值 VIP")
                        }
                        else
                        {
                            @($"VIP 还剩 {(StateCache.User.VIPExpireTime - DateTime.Now).Days} 天")
                        }
                    </NavLink>
                </span>
                <span class="px-2"><b>@_user.Name</b></span>
                <span class="px-2">
                    <a class="link-secondary" style="margin: 0" @onclick="LogoutEvent" href="javascript:">登出</a>
                </span>
                
            }
        </div>

        <article class="">
            @Body
        </article>
    </main>
</div>
}

@code
{
    bool _loading = true;
    User? _user;
    
    async Task LoadUser() 
    {
        var id = await Storage.GetItemAsStringAsync("id");
        if (id is null)
        {
            if (!_loading) return;
            _loading = false;
            await InvokeAsync(StateHasChanged);
            return;
        }
        await using var db = new MgrContext();
        var session = await db.Sessions.Where(s => s.Id == id)
            .Include(s => s.User).FirstOrDefaultAsync();
        if (session is null)
        {
            if (!_loading) return;
            _loading = false;
            await InvokeAsync(StateHasChanged);
            return;
        }
        session.UpdateTime = DateTime.Now;
        await db.SaveChangesAsync();
        _user = session.User;
        StateCache.User = session.User;
        _loading = false;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        NavigationManager.LocationChanged += async (sender, args) => await LoadUser();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (_user is not null)
        {
            if (!_loading) return;
            _loading = false;
            await InvokeAsync(StateHasChanged);
            return;
        }
        await LoadUser();
    // NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    async Task LogoutEvent()
    {
        var id = await Storage.GetItemAsStringAsync("id");
        if (id is null) return;
        await Storage.RemoveItemAsync("id");
        await using var db = new MgrContext();
        var session = await db.Sessions.Where(s => s.Id == id).FirstOrDefaultAsync();
        if (session is null) return;
        db.Remove(session);
        await db.SaveChangesAsync();
        StateCache.User = null;
        _user = null;
        // await InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
