@using cinima_mgr.Data
@using Microsoft.EntityFrameworkCore
@inherits LayoutComponentBase
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject StateCache StateCache
@inject NavigationManager NavigationManager

<PageTitle>喵票票</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu Logined="StateCache.User is not null" IsMgr="StateCache.User is not null && StateCache.User.IsMgr"/>
    </div>

    <main>
        <div class="top-row px-4">
            @if (StateCache.User is null)
            {
                <NavLink class="nav" href="/Login">Login</NavLink>
                <NavLink class="nav" href="/Register">Register</NavLink>
            }
            else
            {
                <span class="px-3">
                    <NavLink>
                        @if (StateCache.User.VIPExpireTime < DateTime.Now)
                        {
                            @("充值 VIP")
                        }
                        else
                        {
                            @($"VIP 还剩 {(StateCache.User.VIPExpireTime - DateTime.Now).Days} 天")
                        }
                    </NavLink>
                </span>
                <span class="px-3">@StateCache.User.Name</span>
                <span class="px-3"><a class="link-secondary" @onclick="LogoutEvent" href="javascript:">Logout</a></span>
                
            }
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code
{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (StateCache.User is not null) return;
        var id = await Storage.GetItemAsStringAsync("id");
        if (id is null) return;
        await using var db = new MgrContext();
        var session = await db.Sessions.Where(s => s.Id == id)
            .Include(s => s.User).FirstOrDefaultAsync();
        if (session is null) return;
        StateCache.User = session.User;
        await InvokeAsync(StateHasChanged);
        // NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    async Task LogoutEvent()
    {
        var id = await Storage.GetItemAsStringAsync("id");
        if (id is null) return;
        await Storage.RemoveItemAsync("id");
        await using var db = new MgrContext();
        var session = await db.Sessions.Where(s => s.Id == id).FirstOrDefaultAsync();
        if (session is null) return;
        db.Remove(session);
        await db.SaveChangesAsync();
        StateCache.User = null;
        await InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }
}
